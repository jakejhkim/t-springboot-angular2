buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    //https://plugins.gradle.org/plugin/com.moowork.node
    id "com.moowork.node" version "0.13"
    id "com.moowork.gulp" version "0.13"
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'war'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main/")
    }
}

jar {
    baseName = 'spring-boot-angular2-test'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    dev // 뭐에 쓰는 놈일까
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

def generatedWebResources = "${buildDir}/generated-web-resources"

sourceSets {
    main {
        output.dir(generatedWebResources, builtBy: 'gulp_build')
    }
}

// configure gradle-node-plugin
node {
    version = '6.3.0'
    npmVersion = '3.10.5'
    download = true
    workDir = file("${project.projectDir}/src/main/web/node")
    nodeModulesDir = file("${project.projectDir}/src/main/web")
}

// configure gradle-grunt-plugin
gulp {
    workDir = file("${project.projectDir}/src/main/web");
    colors = true
    bufferOutput = false
}

// watch ts, sass, html files for changes and build
task gulpWatch(type: GulpTask) {
    args = ['watch']
}

// gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

// clean node/node_modules/typings
task npmClean(type: Delete) {
    final def webDir = "${rootDir}/src/main/web"
    delete "${webDir}/node"
    delete "${webDir}/node_modules"
    delete "${webDir}/typings"
}

// run spring boot app
bootRun {
    addResources = true
    classpath = sourceSets.main.runtimeClasspath + configurations.dev
}

// ensure resources are processed before code is compiled
compileJava.dependsOn(processResources);

// build front-end before making jar
processResources.dependsOn(npmInstall)
npmInstall.finalizedBy(gulp_build)

// run npmClean before clean
clean.dependsOn(npmClean)
